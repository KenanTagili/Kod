public class Main {
	public static void kenanRoot(double x, int n) {
		int arr[] = { 2, 4, 8, 16, 32, 64, 128, 512, 1024 };
		x = x * Math.pow(10, n);
		int i;
		for (i = 0; i < arr.length; i++) {
			int t = n - arr[i];
			if (t < 0)
				break;
		}

		double z = x;
		double s = x;
		for (int j = 0; j < i + 1; j++) {
			z = Math.sqrt(z);
			s = Math.sqrt(s);
		}
		z = Math.floor(z);
		s = s * s;
		s = Math.ceil(s);

		double y, r;
		for (r = z; r <= s; r++) {
			y = Math.pow(r, n);
			if (y > x) {
				r--;
				break;
			} else if (y == x)
				break;
		}
		System.out.println(r / 10);
	}

	public static void nthRoot(int A, int N) {
		double xPre = Math.random() % 10;
		double eps = 0.001;
		double delX = 2147483647;
		double xK = 0.0;

		while (delX > eps) {
			xK = ((N - 1.0) * xPre + (double) A / Math.pow(xPre, N - 1)) / (double) N;
			delX = Math.abs(xK - xPre);
			xPre = xK;
		}
		System.out.println(Math.round(xK * 1000.0) / 1000.0);
	}

	public static void NthRoot(double value, double degree) {
		System.out.println(Math.pow(value, (double) (1 / degree)));
	}

	public static void main(String[] args) {
		try (Scanner scan = new Scanner(System.in)) {
			int x = scan.nextInt();
			int n = scan.nextInt();

			kenanRoot(x, n);
			NthRoot(x, n);
			nthRoot(x, n);
		}
	}
}
